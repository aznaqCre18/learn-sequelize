'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var LRU = require('lru-cache');

var parserCache = new LRU({
  max: 15000
});

function keyFromFields(type, fields, options, config) {
  var res = "".concat(type) + "/".concat(_typeof(options.nestTables)) + "/".concat(options.nestTables) + "/".concat(options.rowsAsArray) + "/".concat(options.supportBigNumbers || config.supportBigNumbers) + "/".concat(options.bigNumberStrings || config.bigNumberStrings) + "/".concat(_typeof(options.typeCast)) + "/".concat(options.timezone || config.timezone) + "/".concat(options.decimalNumbers) + "/".concat(options.dateStrings);

  for (var i = 0; i < fields.length; ++i) {
    var field = fields[i];
    res += "/".concat(field.name, ":").concat(field.columnType, ":").concat(field.length, ":").concat(field.schema, ":").concat(field.table, ":").concat(field.flags, ":").concat(field.characterSet);
  }

  return res;
}

function getParser(type, fields, options, config, compiler) {
  var key = keyFromFields(type, fields, options, config);
  var parser = parserCache.get(key);

  if (parser) {
    return parser;
  }

  parser = compiler(fields, options, config);
  parserCache.set(key, parser);
  return parser;
}

function setMaxCache(max) {
  parserCache.max = max;
}

function clearCache() {
  parserCache.reset();
}

module.exports = {
  getParser: getParser,
  setMaxCache: setMaxCache,
  clearCache: clearCache
};