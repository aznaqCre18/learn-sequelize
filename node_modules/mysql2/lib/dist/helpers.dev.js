'use strict';
/*

  this seems to be not only shorter, but faster than
  string.replace(/\\/g, '\\\\').
            replace(/\u0008/g, '\\b').
            replace(/\t/g, '\\t').
            replace(/\n/g, '\\n').
            replace(/\f/g, '\\f').
            replace(/\r/g, '\\r').
            replace(/'/g, '\\\'').
            replace(/"/g, '\\"');
  or string.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&")
  see http://jsperf.com/string-escape-regexp-vs-json-stringify
  */

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function srcEscape(str) {
  return JSON.stringify(_defineProperty({}, str, 1)).slice(1, -3);
}

exports.srcEscape = srcEscape;
var highlightFn;
var cardinalRecommended = false;

try {
  highlightFn = require('cardinal').highlight;
} catch (err) {
  highlightFn = function highlightFn(text) {
    if (!cardinalRecommended) {
      // eslint-disable-next-line no-console
      console.log('For nicer debug output consider install cardinal@^2.0.0');
      cardinalRecommended = true;
    }

    return text;
  };
}
/**
 * Prints debug message with code frame, will try to use `cardinal` if available.
 */


function printDebugWithCode(msg, code) {
  // eslint-disable-next-line no-console
  console.log("\n\n".concat(msg, ":\n")); // eslint-disable-next-line no-console

  console.log("".concat(highlightFn(code), "\n"));
}

exports.printDebugWithCode = printDebugWithCode;
/**
 * checks whether the `type` is in the `list`
 */

function typeMatch(type, list, Types) {
  if (Array.isArray(list)) {
    return list.some(function (t) {
      return type === Types[t];
    });
  }

  return !!list;
}

exports.typeMatch = typeMatch;